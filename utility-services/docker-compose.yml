version: '3.4'

networks:
  utility-services:
    external: true

services:
  homepage:
    image: ghcr.io/gethomepage/homepage:v1.3.2
    container_name: homepage
    ports:
      - 3000:3000
    environment:
      - TZ=${TIMEZONE}
      - HOMEPAGE_ALLOWED_HOSTS=${HOMEPAGE_ALLOWED_HOSTS}
      - HOMEPAGE_VAR_SERVER_IP=${SERVER_IP}
      - HOMEPAGE_VAR_NETW_SEC_IP=${NETW_SEC_IP}
      - HOMEPAGE_VAR_HOAS_SERVER_IP=${HOAS_SERVER_IP}
      - HOMEPAGE_VAR_SONARR_KEY=${SONARR_API_KEY}
      - HOMEPAGE_VAR_RADARR_KEY=${RADARR_API_KEY}
      - HOMEPAGE_VAR_OVERSEERR_KEY=${OVERSEERR_API_KEY}
      - HOMEPAGE_VAR_BAZARR_KEY=${BAZARR_API_KEY}
      - HOMEPAGE_VAR_DELUGE_PASSWORD=${DELUGE_PASSWORD}
      - HOMEPAGE_VAR_TAUTULLI_KEY=${TAUTULLI_API_KEY}
      - HOMEPAGE_VAR_PORTAINER_KEY=${PORTAINER_API_KEY}
      - HOMEPAGE_VAR_PORTAINER_NETW_SEC_KEY=${PORTAINER_NETW_SEC_API_KEY}
      - HOMEPAGE_VAR_HOMEBRIDGE_USERNAME=${HOMEBRIDGE_USERNAME}
      - HOMEPAGE_VAR_HOMEBRIDGE_PASSWORD=${HOMEBRIDGE_PASSWORD}
      - HOMEPAGE_VAR_HOME_ASSISTANT_KEY=${HOME_ASSISTANT_KEY}
      - HOMEPAGE_VAR_ADGUARD_IP=${ADGUARD_IP}
      - HOMEPAGE_VAR_ADGUARD_USERNAME=${ADGUARD_USERNAME}
      - HOMEPAGE_VAR_ADGUARD_PASSWORD=${ADGUARD_PASSWORD}
      - HOMEPAGE_VAR_NPM_IP=${NPM_IP}
      - HOMEPAGE_VAR_TVHEADEND_IP=${TVHEADEND_IP}
      - HOMEPAGE_VAR_PAPERLESS_NGX_KEY=${PAPERLESS_NGX_KEY}
    volumes:
      - ${VOLUMES_PATH}/utility-services/homepage/config:/app/config
      - ${MEDIA_HDD_PATH}:/media
    restart: unless-stopped
    networks:
      - utility-services

  dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:0.3.0
    container_name: dockerproxy
    ports:
      - 2375:2375
    environment:
      - CONTAINERS=1
      - POST=0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    networks:
      - utility-services

  speedtest-tracker:
    image: linuxserver/speedtest-tracker:1.6.0
    container_name: speedtest-tracker
    ports:
      - 8081:80
      - 8443:443
    environment:
      - PUID=1000
      - PGID=1000
      - DB_CONNECTION=mysql
      - DB_HOST=mariadb-speedtest-tracker
      - DB_PORT=3306
      - DB_DATABASE=speedtest_tracker
      - DB_USERNAME=${SPEEDTEST_TRACKER_USER}
      - DB_PASSWORD=${SPEEDTEST_TRACKER_PASSWORD}
      - APP_KEY=${SPEEDTEST_APP_KEY}
      - APP_TIMEZONE=${SPEEDTEST_APP_TIMEZONE}
      - DISPLAY_TIMEZONE=${SPEEDTEST_DISPLAY_TIMEZONE}
      - SPEEDTEST_SCHEDULE=${SPEEDTEST_SCHEDULE}
    volumes:
      - ${VOLUMES_PATH}/utility-services/speedtest-tracker/speedtest-tracker/config:/config
      - ${VOLUMES_PATH}/utility-services/speedtest-tracker/speedtest-tracker/web:/etc/ssl/web
    depends_on:
      - mariadb-speedtest-tracker
    restart: unless-stopped
    networks:
      - utility-services
    healthcheck:
      test: curl -fSs localhost/api/healthcheck || exit 1
      interval: 10s
      retries: 3
      start_period: 30s
      timeout: 10s
      
  mariadb-speedtest-tracker:
    container_name: mariadb-speedtest-tracker
    image: mariadb:11.8.2
    expose:
      - 3306
    environment:
      - MARIADB_DATABASE=speedtest_tracker
      - MARIADB_USER=${SPEEDTEST_TRACKER_USER}
      - MARIADB_PASSWORD=${SPEEDTEST_TRACKER_PASSWORD}
      - MARIADB_RANDOM_ROOT_PASSWORD=true
      - MARIADB_MYSQL_LOCALHOST_USER=true
    volumes:
      - ${VOLUMES_PATH}/utility-services/speedtest-tracker/mariadb:/var/lib/mysql
    restart: unless-stopped
    networks:
      - utility-services
    healthcheck:
        test: [ "CMD", "healthcheck.sh", "--su-mysql", "--connect", "--innodb_initialized" ]
        start_period: 1m
        start_interval: 10s
        interval: 1m
        timeout: 5s
        retries: 3

  scrutiny-web:
    image: ghcr.io/analogj/scrutiny:v0.8.1-web
    container_name: scrutiny-web
    ports:
      - 8082:8080
    environment:
      - TZ=${TIMEZONE}
      - SCRUTINY_WEB_INFLUXDB_HOST=influxdb-scrutiny
      - SCRUTINY_NOTIFY_URLS= [ ${DISCORD_WEBHOOK} ]
    volumes:
      - ${VOLUMES_PATH}/utility-services/scrutiny/config:/opt/scrutiny/config
    restart: unless-stopped
    depends_on:
      influxdb-scrutiny:
        condition: service_healthy
    networks:
      - utility-services
    healthcheck:
      test: ["CMD", "curl", "-ILfSs", "http://localhost:8080/api/health"]
      interval: 60s
      retries: 5
      timeout: 10s
      start_period: 20s
      
  influxdb-scrutiny:
    image: influxdb:2.7
    container_name: influxdb-scrutiny
    ports:
      - 8086:8086
    volumes:
      - ${VOLUMES_PATH}/utility-services/scrutiny/influxdb:/var/lib/influxdb2
    restart: unless-stopped
    networks:
      - utility-services
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 5s
      timeout: 10s
      retries: 20

  filebrowser:
    image: filebrowser/filebrowser:v2.32.0
    container_name: filebrowser
    ports:
      - 8300:80
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - ${VOLUMES_PATH}/utility-services/filebrowser/filebrowser.db:/filebrowser.db
      - ${VOLUMES_PATH}/utility-services/filebrowser/.filebrowser.json:/.filebrowser.json
      - /:/srv
    restart: unless-stopped
    networks:
      - utility-services
  
  pairdrop:
    image: linuxserver/pairdrop:1.11.2
    container_name: pairdrop 
    ports:
      - 3003:3000
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=S<TIMEZONE)
      - RATE_LIMIT=false
      - WS_FALLBACK=false
      - DEBUG_MODE=false 
    restart: unless-stopped 
    networks:
      - utility-services

  netbootxyz:
    image: ghcr.io/netbootxyz/netbootxyz:0.7.6-nbxyz2
    container_name: netbootxyz
    volumes:
      - ${VOLUMES_PATH}/utility-services/netbootxyz/config:/config
      - ${VOLUMES_PATH}/utility-services/netbootxyz/assets:/assets
    ports:
      - 3004:3000
      - 69:69/udp
      - 8083:80
    restart: unless-stopped
    networks:
      - utility-services

  pgadmin:
    image: dpage/pgadmin4:9.4
    container_name: pgadmin
    ports:
      - 8677:80
    environment:
      - PUID=1000
      - PGID=1000
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    networks:
      - utility-services
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:80/misc/ping"]
      interval: 10s
      timeout: 10s
      start_period: 160s
      retries: 3

  redis-paperless-ngx:
    image: redis:8.0.2
    container_name: redis-paperless-ngx
    environment:
      - TZ=${TIMEZONE}
    volumes:
      - ${VOLUMES_PATH}/utility-services/paperless-ngx/redis:/data
    restart: unless-stopped
    networks:
      - utility-services

  postgres-paperless-ngx:
    image: postgres:17.5
    container_name: postgres-paperless-ngx
    ports:
      - 5432:5432
    environment:
      - TZ=${TIMEZONE}
      - POSTGRES_DB=${PAPERLESS_POSTGRES_DB}
      - POSTGRES_USER=${PAPERLESS_POSTGRES_USER}
      - POSTGRES_PASSWORD=${PAPERLESS_POSTGRES_PASSWORD}
    volumes:
      - ${VOLUMES_PATH}/utility-services/paperless-ngx/pgdata:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - utility-services

  paperless-ngx:
    image: ghcr.io/paperless-ngx/paperless-ngx:2.16.3
    container_name: paperless-ngx
    ports:
      - 8555:8000    
    environment:
      - PAPERLESS_TIME_ZONE=${TIMEZONE}
      - PAPERLESS_REDIS=redis://redis-paperless-ngx:6379
      - PAPERLESS_DBHOST=postgres-paperless-ngx
      - COMPOSE_PROJECT_NAME=paperless
      - PAPERLESS_DBPASS=${PAPERLESS_POSTGRES_PASSWORD}
      - PAPERLESS_OCR_LANGUAGES=ron
      - PAPERLESS_OCR_LANGUAGE=ron
    volumes:
      - ${VOLUMES_PATH}/utility-services/paperless-ngx/paperless-ngx/data:/usr/src/paperless/data
      - ${VOLUMES_PATH}/utility-services/paperless-ngx/paperless-ngx/media:/usr/src/paperless/media
      - ${VOLUMES_PATH}/utility-services/paperless-ngx/paperless-ngx/export:/usr/src/paperless/export
      - ${VOLUMES_PATH}/utility-services/paperless-ngx/paperless-ngx/consume:/usr/src/paperless/consume
    restart: unless-stopped
    networks:
      - utility-services
    depends_on:
      - postgres-paperless-ngx
      - redis-paperless-ngx
    healthcheck:
      test: ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5

  changedetection.io:
    image: linuxserver/changedetection.io:0.50.3
    container_name: changedetection
    ports:
      - 5000:5000
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - LC_ALL=en_US.UTF-8
      - WEBDRIVER_URL=${SERVER_IP}:4444
    volumes:
      - ${VOLUMES_PATH}/utility-services/changedetection/config:/config
    restart: unless-stopped
    networks:
      - utility-services

  standalone-chromium:
    image: selenium/standalone-chromium:4.33.0
    container_name: standalone-chromium
    ports:
      - 4444:4444
    volumes:
      - /dev/shm:/dev/shm
    shm_size: "2g"
    restart: unless-stopped
    networks:
      - utility-services
      
  iperf3:
    image: mlabbe/iperf3:3.16-r0
    container_name: iperf3
    ports:
      - "5201:5201/tcp"
      - "5201:5201/udp"
    restart: unless-stopped
    networks:
      - utility-services

  paperless-ai:
    image: clusterzx/paperless-ai:3.0.4
    container_name: paperless-ai
    ports:
      - 3001:3000
    volumes:
      - ${VOLUMES_PATH}/utility-services/paperless-ai/data:/app/data
    restart: unless-stopped
    networks:
      - utility-services  

volumes:
  pgadmin_data:
