version: '3.4'

networks:
  utility-services:
    external: true
  mqtt:
    external: true

services:
  homepage:
    image: ghcr.io/gethomepage/homepage:v0.8.8
    container_name: homepage
    ports:
      - 3000:3000
    environment:
      - TZ=${TIMEZONE}
      - HOMEPAGE_VAR_SERVER_IP=${SERVER_IP}
      - HOMEPAGE_VAR_HOAS_SERVER_IP=${HOAS_SERVER_IP}
      - HOMEPAGE_VAR_SONARR_KEY=${SONARR_API_KEY}
      - HOMEPAGE_VAR_RADARR_KEY=${RADARR_API_KEY}
      - HOMEPAGE_VAR_OVERSEERR_KEY=${OVERSEERR_API_KEY}
      - HOMEPAGE_VAR_BAZARR_KEY=${BAZARR_API_KEY}
      - HOMEPAGE_VAR_QBITTORRENT_USERNAME=${QBITTORRENT_USERNAME}
      - HOMEPAGE_VAR_QBITTORRENT_PASSWORD=${QBITTORRENT_PASSWORD}
      - HOMEPAGE_VAR_TAUTULLI_KEY=${TAUTULLI_API_KEY}
      - HOMEPAGE_VAR_PORTAINER_KEY=${PORTAINER_API_KEY}
      - HOMEPAGE_VAR_HOMEBRIDGE_USERNAME=${HOMEBRIDGE_USERNAME}
      - HOMEPAGE_VAR_HOMEBRIDGE_PASSWORD=${HOMEBRIDGE_PASSWORD}
      - HOMEPAGE_VAR_HOME_ASSISTANT_KEY=${HOME_ASSISTANT_KEY}
    volumes:
      - ${VOLUMES_PATH}/utility-services/homepage/config:/app/config
      - ${MEDIA_HDD_PATH}:/media
    restart: unless-stopped
    networks:
      - utility-services

  dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:0.1.1
    container_name: dockerproxy
    ports:
      - 2375:2375
    environment:
      - CONTAINERS=1
      - POST=0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    networks:
      - utility-services

  speedtest-tracker:
    image: ghcr.io/alexjustesen/speedtest-tracker:v0.17.2
    container_name: speedtest-tracker
    ports:
      - 8081:80
      - 8443:443
    environment:
      - PUID=1000
      - PGID=1000
      - DB_CONNECTION=mysql
      - DB_HOST=mariadb-speedtest-tracker
      - DB_PORT=3306
      - DB_DATABASE=speedtest_tracker
      - DB_USERNAME=${SPEEDTEST_TRACKER_USER}
      - DB_PASSWORD=${SPEEDTEST_TRACKER_PASSWORD}
    volumes:
      - ${VOLUMES_PATH}/utility-services/speedtest-tracker/speedtest-tracker/config:/config
      - ${VOLUMES_PATH}/utility-services/speedtest-tracker/speedtest-tracker/web:/etc/ssl/web
    depends_on:
      - mariadb-speedtest-tracker
    restart: unless-stopped
    networks:
      - utility-services
      
  mariadb-speedtest-tracker:
    container_name: mariadb-speedtest-tracker
    image: mariadb:11.2.3
    expose:
      - 3306
    environment:
      - MARIADB_DATABASE=speedtest_tracker
      - MARIADB_USER=${SPEEDTEST_TRACKER_USER}
      - MARIADB_PASSWORD=${SPEEDTEST_TRACKER_PASSWORD}
      - MARIADB_RANDOM_ROOT_PASSWORD=true
      - MARIADB_MYSQL_LOCALHOST_USER=true
    volumes:
      - ${VOLUMES_PATH}/utility-services/speedtest-tracker/mariadb:/var/lib/mysql
    restart: unless-stopped
    networks:
      - utility-services
    healthcheck:
        test: [ "CMD", "healthcheck.sh", "--su-mysql", "--connect", "--innodb_initialized" ]
        start_period: 1m
        start_interval: 10s
        interval: 1m
        timeout: 5s
        retries: 3

  scrutiny:
    image: ghcr.io/analogj/scrutiny:v0.7.3-omnibus
    container_name: scrutiny
    ports:
      - 8082:8080
      - 8086:8086
    environment:
      - TZ=${TIMEZONE}
      - COLLECTOR_CRON_SCHEDULE="0 * * * *"
    volumes:
      - /run/udev:/run/udev:ro
      - ${VOLUMES_PATH}/utility-services/scrutiny/config:/opt/scrutiny/config
      - ${VOLUMES_PATH}/utility-services/scrutiny/influxdb:/opt/scrutiny/influxdb
    devices:
      - /dev/vda
      - /dev/vdb
    cap_add:
      - SYS_RAWIO
    privileged: true
    restart: unless-stopped
    networks:
      - utility-services
    healthcheck:
      test: curl --connect-timeout 15 --silent --show-error --fail http://localhost:8080/api/health | grep -q 'true'
      interval: 60s
      retries: 5
      timeout: 10s
      start_period: 20s

  filebrowser:
    image: filebrowser/filebrowser:s6
    container_name: filebrowser
    ports:
      - 8300:80
    environment:
      - PUID=0
      - PGID=0
      - TZ=${TIMEZONE}
    volumes:
      - ${VOLUMES_PATH}/utility-services/filebrowser/database:/database
      - ${VOLUMES_PATH}/utility-services/filebrowser/config:/config
      - /:/srv
    restart: unless-stopped
    networks:
      - utility-services
  
  pairdrop:
    image: linuxserver/pairdrop:1.10.7
    container_name: pairdrop 
    ports:
      - 3003:3000
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=S<TIMEZONE)
      - RATE_LIMIT=false
      - WS_FALLBACK=false
      - DEBUG_MODE=false 
    restart: unless-stopped 
    networks:
      - utility-services

  netbootxyz:
    image: ghcr.io/netbootxyz/netbootxyz:0.7.1-nbxyz1
    container_name: netbootxyz
    volumes:
      - ${VOLUMES_PATH}/utility-services/netbootxyz/config:/config
      - ${VOLUMES_PATH}/utility-services/netbootxyz/assets:/assets
    ports:
      - 3004:3000
      - 69:69/udp
      - 8083:80
    restart: unless-stopped
    networks:
      - utility-services

  pgadmin:
    image: dpage/pgadmin4:8.3
    container_name: pgadmin
    ports:
      - 8677:80
    environment:
      - PUID=1000
      - PGID=1000
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    networks:
      - utility-services
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:80/misc/ping"]
      interval: 10s
      timeout: 10s
      start_period: 160s
      retries: 3

  redis-paperless-ngx:
    image: redis:7.2.4
    container_name: redis-paperless-ngx
    environment:
      - TZ=${TIMEZONE}
    volumes:
      - ${VOLUMES_PATH}/utility-services/paperless-ngx/redis:/data
    restart: unless-stopped
    networks:
      - utility-services

  postgres-paperless-ngx:
    image: postgres:16.2
    container_name: postgres-paperless-ngx
    ports:
      - 5432:5432
    environment:
      - TZ=${TIMEZONE}
      - POSTGRES_DB=${PAPERLESS_POSTGRES_DB}
      - POSTGRES_USER=${PAPERLESS_POSTGRES_USER}
      - POSTGRES_PASSWORD=${PAPERLESS_POSTGRES_PASSWORD}
    volumes:
      - ${VOLUMES_PATH}/utility-services/paperless-ngx/pgdata:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - utility-services

  paperless-ngx:
    image: ghcr.io/paperless-ngx/paperless-ngx:2.5.3
    container_name: paperless-ngx
    ports:
      - 8555:8000    
    environment:
      - PAPERLESS_TIME_ZONE=${TIMEZONE}
      - PAPERLESS_REDIS=redis://redis-paperless-ngx:6379
      - PAPERLESS_DBHOST=postgres-paperless-ngx
      - COMPOSE_PROJECT_NAME=paperless
      - PAPERLESS_DBPASS=${PAPERLESS_POSTGRES_PASSWORD}
      - PAPERLESS_OCR_LANGUAGES=ron
      - PAPERLESS_OCR_LANGUAGE=ron
    volumes:
      - ${VOLUMES_PATH}/utility-services/paperless-ngx/paperless-ngx/data:/usr/src/paperless/data
      - ${VOLUMES_PATH}/utility-services/paperless-ngx/paperless-ngx/media:/usr/src/paperless/media
      - ${VOLUMES_PATH}/utility-services/paperless-ngx/paperless-ngx/export:/usr/src/paperless/export
      - ${VOLUMES_PATH}/utility-services/paperless-ngx/paperless-ngx/consume:/usr/src/paperless/consume
    restart: unless-stopped
    networks:
      - utility-services
    depends_on:
      - postgres-paperless-ngx
      - redis-paperless-ngx
    healthcheck:
      test: ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  pgadmin_data:
